file:
  upload:
    path: ${FILE_UPLOAD_PATH} # 디렉터리에서 파일을 저장할 경로이다.

logging:
  level:
    '[org.springframework.data.elasticsearch.core]': DEBUG
    '[org.elasticsearch.client]': TRACE
    '[org.apache.http]': TRACE

server:
  port: ${PORT:3000}

spring:
  # .env 파일을 가져온다.
  config:
    import: optional:file:.env[.properties]
    
  data:
    elasticsearch:
      repositories:
        enabled: true

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    # Bulk Insert를 활성화한다.
    url: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}?useSSL=false&allowPublicKeyRetrieval=true&rewriteBatchedStatements=true
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}
    
  elasticsearch:
    password: ${ELASTICSEARCH_PASSWORD}  
    url: ${ELASTICSEARCH_URL}
    uris:
    - ${ELASTICSEARCH_URL}
    username: ${ELASTICSEARCH_USERNAME}

  servlet:
    multipart:
      enabled: true # 멀티파트 업로드를 활성화한다.
      file-size-threshold: 2KB # 보조기억장치에 파일을 쓰기 시작하는 임계값이다.
      max-file-size: 100MB # 단일 파일의 최대 크기이다.
      max-request-size: 900MB # 단일 요청의 최대 크기이다.
      
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: ${GOOGLE_REDIRECT_URI}
            scope: email, profile
            
          naver:
            authorization-grant-type: authorization_code
            client-name: Naver
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: ${NAVER_REDIRECT_URI}
            scope: email, name
            
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  web:
    resources:
      static-locations:
      - classpath:/templates/
            
#  mvc:
#    view:
#      suffix: .html
    
  jwt:
    secret: ${JWT_SECRET}
 
  # Spring Boot 3(Hibernate 6 사용.) 이후로 Hibernate 방언을 선택 사항으로 사용할 수 있다. 
  # Hibernate 6은 classpath에 추가한 드라이버 의존성에 기반하여 자동으로 방언을 구성한다.
  jpa:
    hibernate:
      ddl-auto: create # 테이블이 데이터베이스에 존재하지 않으면 생성한다.
    show-sql: true
    properties:
      hibernate:
        '[format_sql]': true
        dialect: org.hibernate.dialect.MySQLDialect
        default_batch_fetch_size: 100
        
swagger:
  version: 1.0.0
  api-docs:
    path: /api-docs